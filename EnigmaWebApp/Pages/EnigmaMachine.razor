@page "/"

@using Blazor.Extensions
@using Blazor.Extensions.Canvas
@using Blazor.Extensions.Canvas.Canvas2D
@inject IJSRuntime JsRuntime;

@* Tutorial on Blazor.Extensions.Canvas 
https://swharden.com/blog/2021-01-07-blazor-canvas-animated-graphics/ *@

<PageTitle>Enigma Machine</PageTitle>

<h3>Enigma Machine</h3>

<div id="canvasHolder" style="position: fixed; width: 100%; height: 100%">
    <BECanvas Width="600" Height="400" @ref="_canvasReference"></BECanvas>
</div>

@code{
    private Models.EnigmaMachineInterface enigmaMachine = new Models.EnigmaMachineInterface();
    private Canvas2DContext _context;
    private BECanvasComponent _canvasReference;
    private DateTime LastRender;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        this._context = await _canvasReference.CreateCanvas2DAsync();
        await JsRuntime.InvokeAsync<object>("initRenderJS", DotNetObjectReference.Create(this));
        await base.OnInitializedAsync();
    }

    [JSInvokable]
    public void ResizeInBlazor(double width, double height) => enigmaMachine.Resize(width, height);

    [JSInvokable]
    public async ValueTask RenderInBlazor(float timeStamp)
    {
        this._context = await this._canvasReference.CreateCanvas2DAsync();
        await enigmaMachine.Draw(_context);
        
        await this._context.EndBatchAsync();
    }
}